@page "/Participacion"

@using System.Text.Json
@using CarnetsdeFeria.Models
@using CarnetsdeFeria.Interfaces
@using ModelParticipacion = CarnetsdeFeria.Models.Participacion

@inject IParticipacion feria_participacion_Service
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<h3 style="margin-bottom: 20px;">Tipos de Participacion Feria</h3>

<div style="margin-bottom: 20px;">
    <button @onclick="OpenCreateModal" class="btn btn-primary">
        <i class="fas fa-plus"></i> Agregar Nuevo
    </button>
    <button @onclick="PrintTable" class="btn btn-secondary ml-2">
        <i class="fas fa-print"></i> Imprimir
    </button>
</div>

<MudPaper Elevation="3" Class="pa-4">
    <MudText Typo="Typo.h5" Class="mb-2 text-center" Align="Align.Center">Tipos de Participacion</MudText>

    <MudGrid Class="mt-2">
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Label="Buscar por Participacion"
                          Variant="Variant.Outlined"
                          @bind-Value="searchArea"
                          Immediate="true"
                          DebounceInterval="300"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          AdornmentColor="Color.Primary"
                          OnDebounceIntervalElapsed="Search" />
        </MudItem>
    </MudGrid>

    <br />

    @if (isLoading)
    {
        <div class="spinner-container">
            <img src="/images/world-spinner.gif" alt="Cargando..." class="spinner-image" />
        </div>
    }
    else
    {
        <MudTable T="ModelParticipacion"
                  ServerData="@(new Func<TableState, CancellationToken, Task<TableData<ModelParticipacion>>>(ServerReload))"
                  Dense="true"
                  Hover="true"
                  Bordered="true"
                  Loading="@isLoading"
                  RowClass="cursor-pointer"
                  Class="printable-table"
                  @ref="table">

            <HeaderContent>
                <MudTh>Participacion</MudTh>
                <MudTh Class="acciones">Acciones</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Tipos de Participacion">@context.DescripcionParticipacion</MudTd>
                <MudTd DataLabel="Acciones" Class="acciones">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                   Color="Color.Primary"
                                   OnClick="@(() => OpenEditModal(context))"
                                   Title="Editar" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   OnClick="@(() => ConfirmDelete(context.Id))"
                                   Title="Eliminar" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager RowsPerPageString="Productos por página:"
                               InfoFormat="@infoFormat"
                               PageSizeOptions="new int[] { 20, 25, 30, 40, int.MaxValue }" />
            </PagerContent>
        </MudTable>
    }
</MudPaper>

<!-- Modal para Crear/Editar usando Bootstrap -->
@if (showModal)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditMode ? "Editar Participación" : "Nueva Participación")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label for="descripcion" class="form-label">Descripción de Participación *</label>
                        <input type="text"
                               class="form-control"
                               id="descripcion"
                               @bind="currentParticipacion.DescripcionParticipacion"
                               placeholder="Ingrese la descripción de participación"
                               required />
                        @if (showValidationError && string.IsNullOrWhiteSpace(currentParticipacion.DescripcionParticipacion))
                        {
                            <div class="text-danger mt-1">La descripción es requerida</div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                        Cancelar
                    </button>
                    <button type="button"
                            class="btn btn-primary"
                            @onclick="SaveParticipacion"
                            disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Guardando...</span>
                        }
                        else
                        {
                            <span>@(isEditMode ? "Actualizar" : "Guardar")</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = false;
    private string infoFormat = "{first_item}-{last_item} de {all_items}";
    private DialogOptions dialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
    private string searchArea = "";
    private MudTable<ModelParticipacion> table;

    // Variables para el modal
    private bool showModal = false;
    private bool isEditMode = false;
    private bool showValidationError = false;
    private bool isSaving = false;
    private ModelParticipacion currentParticipacion = new ModelParticipacion();

    private async Task<TableData<ModelParticipacion>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        Console.WriteLine($"ServerReload - Página: {state.Page + 1}, PageSize: {state.PageSize}, Búsqueda: '{searchArea}'");

        try
        {
            var page = state.Page + 1;
            var pageSize = state.PageSize;

            var result = await feria_participacion_Service.GetPaginatedAsync(page, pageSize, searchArea);

            Console.WriteLine($"ServerReload - Datos obtenidos: {result?.Items?.Count ?? 0} items de {result?.TotalCount ?? 0} total");

            return new TableData<ModelParticipacion>
            {
                Items = result?.Items ?? new List<ModelParticipacion>(),
                TotalItems = result?.TotalCount ?? 0
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en ServerReload: {ex.Message}");
            return new TableData<ModelParticipacion>
            {
                Items = new List<ModelParticipacion>(),
                TotalItems = 0
            };
        }
    }

    private async Task Search()
    {
        Console.WriteLine($"Search - Término de búsqueda: '{searchArea}'");

        if (table != null)
        {
            await table.ReloadServerData();
        }
    }

    private void OpenCreateModal()
    {
        currentParticipacion = new ModelParticipacion
        {
            Id = 0,
            DescripcionParticipacion = "",
            Estatus = true
        };
        isEditMode = false;
        showModal = true;
        showValidationError = false;
        Console.WriteLine("Modal abierto para crear");
    }

    private async Task OpenEditModal(ModelParticipacion participacion)
    {
        try
        {
            // Obtener los datos completos del elemento
            var fullData = await feria_participacion_Service.GetByIdAsync(participacion.Id);

            currentParticipacion = new ModelParticipacion
            {
                Id = fullData.Id,
                DescripcionParticipacion = fullData.DescripcionParticipacion,
                Estatus = fullData.Estatus
            };

            isEditMode = true;
            showModal = true;
            showValidationError = false;
            Console.WriteLine($"Modal abierto para editar ID: {participacion.Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar datos para editar: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al cargar los datos para editar.");
        }
    }

    private void CloseModal()
    {
        showModal = false;
        currentParticipacion = new ModelParticipacion();
        isEditMode = false;
        showValidationError = false;
        Console.WriteLine("Modal cerrado");
    }

    private async Task SaveParticipacion()
    {
        // Validar campo requerido
        if (string.IsNullOrWhiteSpace(currentParticipacion.DescripcionParticipacion))
        {
            showValidationError = true;
            StateHasChanged();
            return;
        }

        isSaving = true;
        showValidationError = false;

        try
        {
            var result = await feria_participacion_Service.AddUpdateAsync(currentParticipacion);

            if (result)
            {
                await JSRuntime.InvokeVoidAsync("alert",
                    isEditMode ? "Participación actualizada correctamente." : "Participación creada correctamente.");

                CloseModal();

                // Recargar la tabla
                if (table != null)
                {
                    await table.ReloadServerData();
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al guardar la participación.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Ocurrió un error al guardar la participación.");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ConfirmDelete(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro?\n¡Esta acción no se puede deshacer!");

        if (confirmed)
        {
            try
            {
                var deleteResult = await feria_participacion_Service.DeleteAsync(id);
                if (deleteResult)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Eliminado\nEl participante ha sido eliminado correctamente.");

                    if (table != null)
                    {
                        await table.ReloadServerData();
                    }
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error\nNo fue posible eliminar el participante.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al eliminar: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", "Error\nOcurrió un error al eliminar el participante.");
            }
        }
    }

    private async Task PrintTable()
    {
        await JSRuntime.InvokeVoidAsync("printTable");
    }
}